# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  service(relativePath: String): Service!
  serviceConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServiceFilter): ServiceConnection!
  industry(relativePath: String): Industry!
  industryConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: IndustryFilter): IndustryConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  service: ServiceFilter
  industry: IndustryFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Service | Industry | Page | Folder

type ServiceFrontmatterHero {
  subtitle: String
  badge: String
  backgroundImage: String
}

type ServiceFrontmatterOverview {
  description: String
  highlights: [String]
}

type ServiceFrontmatterCapabilities {
  label: String
  value: String
  description: String
}

type ServiceFrontmatterTechnicalSpecsTolerances {
  dimensional: String
  geometric: String
  repeatability: String
}

type ServiceFrontmatterTechnicalSpecsMaterials {
  material: String
  grade: String
}

type ServiceFrontmatterTechnicalSpecs {
  tolerances: ServiceFrontmatterTechnicalSpecsTolerances
  materials: [ServiceFrontmatterTechnicalSpecsMaterials]
}

type ServiceFrontmatterProcess {
  step: Float
  title: String
  description: String
  qualityCheck: String
}

type ServiceFrontmatterEquipment {
  name: String
  manufacturer: String
  model: String
  specs: String
}

type ServiceFrontmatterSeo {
  metaTitle: String
  metaDescription: String
  ogImage: String
}

type ServiceFrontmatter {
  title: String!
  slug: String!
  description: String
  hero: ServiceFrontmatterHero
  overview: ServiceFrontmatterOverview
  capabilities: [ServiceFrontmatterCapabilities]
  technicalSpecs: ServiceFrontmatterTechnicalSpecs
  process: [ServiceFrontmatterProcess]
  equipment: [ServiceFrontmatterEquipment]
  seo: ServiceFrontmatterSeo
}

type Service implements Node & Document {
  frontmatter: ServiceFrontmatter
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ServiceFrontmatterHeroFilter {
  subtitle: StringFilter
  badge: StringFilter
  backgroundImage: ImageFilter
}

input ServiceFrontmatterOverviewFilter {
  description: StringFilter
  highlights: StringFilter
}

input ServiceFrontmatterCapabilitiesFilter {
  label: StringFilter
  value: StringFilter
  description: StringFilter
}

input ServiceFrontmatterTechnicalSpecsTolerancesFilter {
  dimensional: StringFilter
  geometric: StringFilter
  repeatability: StringFilter
}

input ServiceFrontmatterTechnicalSpecsMaterialsFilter {
  material: StringFilter
  grade: StringFilter
}

input ServiceFrontmatterTechnicalSpecsFilter {
  tolerances: ServiceFrontmatterTechnicalSpecsTolerancesFilter
  materials: ServiceFrontmatterTechnicalSpecsMaterialsFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ServiceFrontmatterProcessFilter {
  step: NumberFilter
  title: StringFilter
  description: StringFilter
  qualityCheck: StringFilter
}

input ServiceFrontmatterEquipmentFilter {
  name: StringFilter
  manufacturer: StringFilter
  model: StringFilter
  specs: StringFilter
}

input ServiceFrontmatterSeoFilter {
  metaTitle: StringFilter
  metaDescription: StringFilter
  ogImage: ImageFilter
}

input ServiceFrontmatterFilter {
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  hero: ServiceFrontmatterHeroFilter
  overview: ServiceFrontmatterOverviewFilter
  capabilities: ServiceFrontmatterCapabilitiesFilter
  technicalSpecs: ServiceFrontmatterTechnicalSpecsFilter
  process: ServiceFrontmatterProcessFilter
  equipment: ServiceFrontmatterEquipmentFilter
  seo: ServiceFrontmatterSeoFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ServiceFilter {
  frontmatter: ServiceFrontmatterFilter
  body: RichTextFilter
}

type ServiceConnectionEdges {
  cursor: String!
  node: Service
}

type ServiceConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServiceConnectionEdges]
}

type IndustryFrontmatterHero {
  subtitle: String
  badge: String
  backgroundImage: String
}

type IndustryFrontmatterOverview {
  description: String
  marketSize: String
  keyDrivers: [String]
  challenges: [String]
}

type IndustryFrontmatterCapabilities {
  title: String
  description: String
  technicalDetails: [String]
}

type IndustryFrontmatterRegulatoryCertifications {
  name: String
  description: String
  scope: String
}

type IndustryFrontmatterRegulatoryStandards {
  name: String
  description: String
}

type IndustryFrontmatterRegulatory {
  certifications: [IndustryFrontmatterRegulatoryCertifications]
  standards: [IndustryFrontmatterRegulatoryStandards]
}

type IndustryFrontmatterApplications {
  name: String
  description: String
  requirements: [String]
}

type IndustryFrontmatterSeo {
  metaTitle: String
  metaDescription: String
  ogImage: String
}

type IndustryFrontmatter {
  title: String!
  slug: String!
  description: String
  hero: IndustryFrontmatterHero
  overview: IndustryFrontmatterOverview
  capabilities: [IndustryFrontmatterCapabilities]
  regulatory: IndustryFrontmatterRegulatory
  applications: [IndustryFrontmatterApplications]
  seo: IndustryFrontmatterSeo
}

type Industry implements Node & Document {
  frontmatter: IndustryFrontmatter
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input IndustryFrontmatterHeroFilter {
  subtitle: StringFilter
  badge: StringFilter
  backgroundImage: ImageFilter
}

input IndustryFrontmatterOverviewFilter {
  description: StringFilter
  marketSize: StringFilter
  keyDrivers: StringFilter
  challenges: StringFilter
}

input IndustryFrontmatterCapabilitiesFilter {
  title: StringFilter
  description: StringFilter
  technicalDetails: StringFilter
}

input IndustryFrontmatterRegulatoryCertificationsFilter {
  name: StringFilter
  description: StringFilter
  scope: StringFilter
}

input IndustryFrontmatterRegulatoryStandardsFilter {
  name: StringFilter
  description: StringFilter
}

input IndustryFrontmatterRegulatoryFilter {
  certifications: IndustryFrontmatterRegulatoryCertificationsFilter
  standards: IndustryFrontmatterRegulatoryStandardsFilter
}

input IndustryFrontmatterApplicationsFilter {
  name: StringFilter
  description: StringFilter
  requirements: StringFilter
}

input IndustryFrontmatterSeoFilter {
  metaTitle: StringFilter
  metaDescription: StringFilter
  ogImage: ImageFilter
}

input IndustryFrontmatterFilter {
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  hero: IndustryFrontmatterHeroFilter
  overview: IndustryFrontmatterOverviewFilter
  capabilities: IndustryFrontmatterCapabilitiesFilter
  regulatory: IndustryFrontmatterRegulatoryFilter
  applications: IndustryFrontmatterApplicationsFilter
  seo: IndustryFrontmatterSeoFilter
}

input IndustryFilter {
  frontmatter: IndustryFrontmatterFilter
  body: RichTextFilter
}

type IndustryConnectionEdges {
  cursor: String!
  node: Industry
}

type IndustryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [IndustryConnectionEdges]
}

type PageFrontmatter {
  title: String!
  slug: String!
  description: String
}

type Page implements Node & Document {
  frontmatter: PageFrontmatter
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageFrontmatterFilter {
  title: StringFilter
  slug: StringFilter
  description: StringFilter
}

input PageFilter {
  frontmatter: PageFrontmatterFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateService(relativePath: String!, params: ServiceMutation!): Service!
  createService(relativePath: String!, params: ServiceMutation!): Service!
  updateIndustry(relativePath: String!, params: IndustryMutation!): Industry!
  createIndustry(relativePath: String!, params: IndustryMutation!): Industry!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  service: ServiceMutation
  industry: IndustryMutation
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  service: ServiceMutation
  industry: IndustryMutation
  page: PageMutation
}

input ServiceFrontmatterHeroMutation {
  subtitle: String
  badge: String
  backgroundImage: String
}

input ServiceFrontmatterOverviewMutation {
  description: String
  highlights: [String]
}

input ServiceFrontmatterCapabilitiesMutation {
  label: String
  value: String
  description: String
}

input ServiceFrontmatterTechnicalSpecsTolerancesMutation {
  dimensional: String
  geometric: String
  repeatability: String
}

input ServiceFrontmatterTechnicalSpecsMaterialsMutation {
  material: String
  grade: String
}

input ServiceFrontmatterTechnicalSpecsMutation {
  tolerances: ServiceFrontmatterTechnicalSpecsTolerancesMutation
  materials: [ServiceFrontmatterTechnicalSpecsMaterialsMutation]
}

input ServiceFrontmatterProcessMutation {
  step: Float
  title: String
  description: String
  qualityCheck: String
}

input ServiceFrontmatterEquipmentMutation {
  name: String
  manufacturer: String
  model: String
  specs: String
}

input ServiceFrontmatterSeoMutation {
  metaTitle: String
  metaDescription: String
  ogImage: String
}

input ServiceFrontmatterMutation {
  title: String
  slug: String
  description: String
  hero: ServiceFrontmatterHeroMutation
  overview: ServiceFrontmatterOverviewMutation
  capabilities: [ServiceFrontmatterCapabilitiesMutation]
  technicalSpecs: ServiceFrontmatterTechnicalSpecsMutation
  process: [ServiceFrontmatterProcessMutation]
  equipment: [ServiceFrontmatterEquipmentMutation]
  seo: ServiceFrontmatterSeoMutation
}

input ServiceMutation {
  frontmatter: ServiceFrontmatterMutation
  body: JSON
}

input IndustryFrontmatterHeroMutation {
  subtitle: String
  badge: String
  backgroundImage: String
}

input IndustryFrontmatterOverviewMutation {
  description: String
  marketSize: String
  keyDrivers: [String]
  challenges: [String]
}

input IndustryFrontmatterCapabilitiesMutation {
  title: String
  description: String
  technicalDetails: [String]
}

input IndustryFrontmatterRegulatoryCertificationsMutation {
  name: String
  description: String
  scope: String
}

input IndustryFrontmatterRegulatoryStandardsMutation {
  name: String
  description: String
}

input IndustryFrontmatterRegulatoryMutation {
  certifications: [IndustryFrontmatterRegulatoryCertificationsMutation]
  standards: [IndustryFrontmatterRegulatoryStandardsMutation]
}

input IndustryFrontmatterApplicationsMutation {
  name: String
  description: String
  requirements: [String]
}

input IndustryFrontmatterSeoMutation {
  metaTitle: String
  metaDescription: String
  ogImage: String
}

input IndustryFrontmatterMutation {
  title: String
  slug: String
  description: String
  hero: IndustryFrontmatterHeroMutation
  overview: IndustryFrontmatterOverviewMutation
  capabilities: [IndustryFrontmatterCapabilitiesMutation]
  regulatory: IndustryFrontmatterRegulatoryMutation
  applications: [IndustryFrontmatterApplicationsMutation]
  seo: IndustryFrontmatterSeoMutation
}

input IndustryMutation {
  frontmatter: IndustryFrontmatterMutation
  body: JSON
}

input PageFrontmatterMutation {
  title: String
  slug: String
  description: String
}

input PageMutation {
  frontmatter: PageFrontmatterMutation
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
