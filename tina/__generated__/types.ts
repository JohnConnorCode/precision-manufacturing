//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  service: Service;
  serviceConnection: ServiceConnection;
  industry: Industry;
  industryConnection: IndustryConnection;
  page: Page;
  pageConnection: PageConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryServiceArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryServiceConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServiceFilter>;
};


export type QueryIndustryArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIndustryConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<IndustryFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};

export type DocumentFilter = {
  service?: InputMaybe<ServiceFilter>;
  industry?: InputMaybe<IndustryFilter>;
  page?: InputMaybe<PageFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Service | Industry | Page | Folder;

export type ServiceFrontmatterHero = {
  __typename?: 'ServiceFrontmatterHero';
  subtitle?: Maybe<Scalars['String']['output']>;
  badge?: Maybe<Scalars['String']['output']>;
  backgroundImage?: Maybe<Scalars['String']['output']>;
};

export type ServiceFrontmatterOverview = {
  __typename?: 'ServiceFrontmatterOverview';
  description?: Maybe<Scalars['String']['output']>;
  highlights?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type ServiceFrontmatterCapabilities = {
  __typename?: 'ServiceFrontmatterCapabilities';
  label?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type ServiceFrontmatterTechnicalSpecsTolerances = {
  __typename?: 'ServiceFrontmatterTechnicalSpecsTolerances';
  dimensional?: Maybe<Scalars['String']['output']>;
  geometric?: Maybe<Scalars['String']['output']>;
  repeatability?: Maybe<Scalars['String']['output']>;
};

export type ServiceFrontmatterTechnicalSpecsMaterials = {
  __typename?: 'ServiceFrontmatterTechnicalSpecsMaterials';
  material?: Maybe<Scalars['String']['output']>;
  grade?: Maybe<Scalars['String']['output']>;
};

export type ServiceFrontmatterTechnicalSpecs = {
  __typename?: 'ServiceFrontmatterTechnicalSpecs';
  tolerances?: Maybe<ServiceFrontmatterTechnicalSpecsTolerances>;
  materials?: Maybe<Array<Maybe<ServiceFrontmatterTechnicalSpecsMaterials>>>;
};

export type ServiceFrontmatterProcess = {
  __typename?: 'ServiceFrontmatterProcess';
  step?: Maybe<Scalars['Float']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  qualityCheck?: Maybe<Scalars['String']['output']>;
};

export type ServiceFrontmatterEquipment = {
  __typename?: 'ServiceFrontmatterEquipment';
  name?: Maybe<Scalars['String']['output']>;
  manufacturer?: Maybe<Scalars['String']['output']>;
  model?: Maybe<Scalars['String']['output']>;
  specs?: Maybe<Scalars['String']['output']>;
};

export type ServiceFrontmatterSeo = {
  __typename?: 'ServiceFrontmatterSeo';
  metaTitle?: Maybe<Scalars['String']['output']>;
  metaDescription?: Maybe<Scalars['String']['output']>;
  ogImage?: Maybe<Scalars['String']['output']>;
};

export type ServiceFrontmatter = {
  __typename?: 'ServiceFrontmatter';
  title: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  hero?: Maybe<ServiceFrontmatterHero>;
  overview?: Maybe<ServiceFrontmatterOverview>;
  capabilities?: Maybe<Array<Maybe<ServiceFrontmatterCapabilities>>>;
  technicalSpecs?: Maybe<ServiceFrontmatterTechnicalSpecs>;
  process?: Maybe<Array<Maybe<ServiceFrontmatterProcess>>>;
  equipment?: Maybe<Array<Maybe<ServiceFrontmatterEquipment>>>;
  seo?: Maybe<ServiceFrontmatterSeo>;
};

export type Service = Node & Document & {
  __typename?: 'Service';
  frontmatter?: Maybe<ServiceFrontmatter>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ServiceFrontmatterHeroFilter = {
  subtitle?: InputMaybe<StringFilter>;
  badge?: InputMaybe<StringFilter>;
  backgroundImage?: InputMaybe<ImageFilter>;
};

export type ServiceFrontmatterOverviewFilter = {
  description?: InputMaybe<StringFilter>;
  highlights?: InputMaybe<StringFilter>;
};

export type ServiceFrontmatterCapabilitiesFilter = {
  label?: InputMaybe<StringFilter>;
  value?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type ServiceFrontmatterTechnicalSpecsTolerancesFilter = {
  dimensional?: InputMaybe<StringFilter>;
  geometric?: InputMaybe<StringFilter>;
  repeatability?: InputMaybe<StringFilter>;
};

export type ServiceFrontmatterTechnicalSpecsMaterialsFilter = {
  material?: InputMaybe<StringFilter>;
  grade?: InputMaybe<StringFilter>;
};

export type ServiceFrontmatterTechnicalSpecsFilter = {
  tolerances?: InputMaybe<ServiceFrontmatterTechnicalSpecsTolerancesFilter>;
  materials?: InputMaybe<ServiceFrontmatterTechnicalSpecsMaterialsFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type ServiceFrontmatterProcessFilter = {
  step?: InputMaybe<NumberFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  qualityCheck?: InputMaybe<StringFilter>;
};

export type ServiceFrontmatterEquipmentFilter = {
  name?: InputMaybe<StringFilter>;
  manufacturer?: InputMaybe<StringFilter>;
  model?: InputMaybe<StringFilter>;
  specs?: InputMaybe<StringFilter>;
};

export type ServiceFrontmatterSeoFilter = {
  metaTitle?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  ogImage?: InputMaybe<ImageFilter>;
};

export type ServiceFrontmatterFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  hero?: InputMaybe<ServiceFrontmatterHeroFilter>;
  overview?: InputMaybe<ServiceFrontmatterOverviewFilter>;
  capabilities?: InputMaybe<ServiceFrontmatterCapabilitiesFilter>;
  technicalSpecs?: InputMaybe<ServiceFrontmatterTechnicalSpecsFilter>;
  process?: InputMaybe<ServiceFrontmatterProcessFilter>;
  equipment?: InputMaybe<ServiceFrontmatterEquipmentFilter>;
  seo?: InputMaybe<ServiceFrontmatterSeoFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ServiceFilter = {
  frontmatter?: InputMaybe<ServiceFrontmatterFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type ServiceConnectionEdges = {
  __typename?: 'ServiceConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Service>;
};

export type ServiceConnection = Connection & {
  __typename?: 'ServiceConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ServiceConnectionEdges>>>;
};

export type IndustryFrontmatterHero = {
  __typename?: 'IndustryFrontmatterHero';
  subtitle?: Maybe<Scalars['String']['output']>;
  badge?: Maybe<Scalars['String']['output']>;
  backgroundImage?: Maybe<Scalars['String']['output']>;
};

export type IndustryFrontmatterOverview = {
  __typename?: 'IndustryFrontmatterOverview';
  description?: Maybe<Scalars['String']['output']>;
  marketSize?: Maybe<Scalars['String']['output']>;
  keyDrivers?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  challenges?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type IndustryFrontmatterCapabilities = {
  __typename?: 'IndustryFrontmatterCapabilities';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  technicalDetails?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type IndustryFrontmatterRegulatoryCertifications = {
  __typename?: 'IndustryFrontmatterRegulatoryCertifications';
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  scope?: Maybe<Scalars['String']['output']>;
};

export type IndustryFrontmatterRegulatoryStandards = {
  __typename?: 'IndustryFrontmatterRegulatoryStandards';
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type IndustryFrontmatterRegulatory = {
  __typename?: 'IndustryFrontmatterRegulatory';
  certifications?: Maybe<Array<Maybe<IndustryFrontmatterRegulatoryCertifications>>>;
  standards?: Maybe<Array<Maybe<IndustryFrontmatterRegulatoryStandards>>>;
};

export type IndustryFrontmatterApplications = {
  __typename?: 'IndustryFrontmatterApplications';
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  requirements?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type IndustryFrontmatterSeo = {
  __typename?: 'IndustryFrontmatterSeo';
  metaTitle?: Maybe<Scalars['String']['output']>;
  metaDescription?: Maybe<Scalars['String']['output']>;
  ogImage?: Maybe<Scalars['String']['output']>;
};

export type IndustryFrontmatter = {
  __typename?: 'IndustryFrontmatter';
  title: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  hero?: Maybe<IndustryFrontmatterHero>;
  overview?: Maybe<IndustryFrontmatterOverview>;
  capabilities?: Maybe<Array<Maybe<IndustryFrontmatterCapabilities>>>;
  regulatory?: Maybe<IndustryFrontmatterRegulatory>;
  applications?: Maybe<Array<Maybe<IndustryFrontmatterApplications>>>;
  seo?: Maybe<IndustryFrontmatterSeo>;
};

export type Industry = Node & Document & {
  __typename?: 'Industry';
  frontmatter?: Maybe<IndustryFrontmatter>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type IndustryFrontmatterHeroFilter = {
  subtitle?: InputMaybe<StringFilter>;
  badge?: InputMaybe<StringFilter>;
  backgroundImage?: InputMaybe<ImageFilter>;
};

export type IndustryFrontmatterOverviewFilter = {
  description?: InputMaybe<StringFilter>;
  marketSize?: InputMaybe<StringFilter>;
  keyDrivers?: InputMaybe<StringFilter>;
  challenges?: InputMaybe<StringFilter>;
};

export type IndustryFrontmatterCapabilitiesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  technicalDetails?: InputMaybe<StringFilter>;
};

export type IndustryFrontmatterRegulatoryCertificationsFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  scope?: InputMaybe<StringFilter>;
};

export type IndustryFrontmatterRegulatoryStandardsFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type IndustryFrontmatterRegulatoryFilter = {
  certifications?: InputMaybe<IndustryFrontmatterRegulatoryCertificationsFilter>;
  standards?: InputMaybe<IndustryFrontmatterRegulatoryStandardsFilter>;
};

export type IndustryFrontmatterApplicationsFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  requirements?: InputMaybe<StringFilter>;
};

export type IndustryFrontmatterSeoFilter = {
  metaTitle?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  ogImage?: InputMaybe<ImageFilter>;
};

export type IndustryFrontmatterFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  hero?: InputMaybe<IndustryFrontmatterHeroFilter>;
  overview?: InputMaybe<IndustryFrontmatterOverviewFilter>;
  capabilities?: InputMaybe<IndustryFrontmatterCapabilitiesFilter>;
  regulatory?: InputMaybe<IndustryFrontmatterRegulatoryFilter>;
  applications?: InputMaybe<IndustryFrontmatterApplicationsFilter>;
  seo?: InputMaybe<IndustryFrontmatterSeoFilter>;
};

export type IndustryFilter = {
  frontmatter?: InputMaybe<IndustryFrontmatterFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type IndustryConnectionEdges = {
  __typename?: 'IndustryConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Industry>;
};

export type IndustryConnection = Connection & {
  __typename?: 'IndustryConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<IndustryConnectionEdges>>>;
};

export type PageFrontmatter = {
  __typename?: 'PageFrontmatter';
  title: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  frontmatter?: Maybe<PageFrontmatter>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PageFrontmatterFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PageFilter = {
  frontmatter?: InputMaybe<PageFrontmatterFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateService: Service;
  createService: Service;
  updateIndustry: Industry;
  createIndustry: Industry;
  updatePage: Page;
  createPage: Page;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateServiceArgs = {
  relativePath: Scalars['String']['input'];
  params: ServiceMutation;
};


export type MutationCreateServiceArgs = {
  relativePath: Scalars['String']['input'];
  params: ServiceMutation;
};


export type MutationUpdateIndustryArgs = {
  relativePath: Scalars['String']['input'];
  params: IndustryMutation;
};


export type MutationCreateIndustryArgs = {
  relativePath: Scalars['String']['input'];
  params: IndustryMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};

export type DocumentUpdateMutation = {
  service?: InputMaybe<ServiceMutation>;
  industry?: InputMaybe<IndustryMutation>;
  page?: InputMaybe<PageMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  service?: InputMaybe<ServiceMutation>;
  industry?: InputMaybe<IndustryMutation>;
  page?: InputMaybe<PageMutation>;
};

export type ServiceFrontmatterHeroMutation = {
  subtitle?: InputMaybe<Scalars['String']['input']>;
  badge?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceFrontmatterOverviewMutation = {
  description?: InputMaybe<Scalars['String']['input']>;
  highlights?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ServiceFrontmatterCapabilitiesMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceFrontmatterTechnicalSpecsTolerancesMutation = {
  dimensional?: InputMaybe<Scalars['String']['input']>;
  geometric?: InputMaybe<Scalars['String']['input']>;
  repeatability?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceFrontmatterTechnicalSpecsMaterialsMutation = {
  material?: InputMaybe<Scalars['String']['input']>;
  grade?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceFrontmatterTechnicalSpecsMutation = {
  tolerances?: InputMaybe<ServiceFrontmatterTechnicalSpecsTolerancesMutation>;
  materials?: InputMaybe<Array<InputMaybe<ServiceFrontmatterTechnicalSpecsMaterialsMutation>>>;
};

export type ServiceFrontmatterProcessMutation = {
  step?: InputMaybe<Scalars['Float']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  qualityCheck?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceFrontmatterEquipmentMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  manufacturer?: InputMaybe<Scalars['String']['input']>;
  model?: InputMaybe<Scalars['String']['input']>;
  specs?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceFrontmatterSeoMutation = {
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  ogImage?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceFrontmatterMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<ServiceFrontmatterHeroMutation>;
  overview?: InputMaybe<ServiceFrontmatterOverviewMutation>;
  capabilities?: InputMaybe<Array<InputMaybe<ServiceFrontmatterCapabilitiesMutation>>>;
  technicalSpecs?: InputMaybe<ServiceFrontmatterTechnicalSpecsMutation>;
  process?: InputMaybe<Array<InputMaybe<ServiceFrontmatterProcessMutation>>>;
  equipment?: InputMaybe<Array<InputMaybe<ServiceFrontmatterEquipmentMutation>>>;
  seo?: InputMaybe<ServiceFrontmatterSeoMutation>;
};

export type ServiceMutation = {
  frontmatter?: InputMaybe<ServiceFrontmatterMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type IndustryFrontmatterHeroMutation = {
  subtitle?: InputMaybe<Scalars['String']['input']>;
  badge?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
};

export type IndustryFrontmatterOverviewMutation = {
  description?: InputMaybe<Scalars['String']['input']>;
  marketSize?: InputMaybe<Scalars['String']['input']>;
  keyDrivers?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  challenges?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type IndustryFrontmatterCapabilitiesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  technicalDetails?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type IndustryFrontmatterRegulatoryCertificationsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  scope?: InputMaybe<Scalars['String']['input']>;
};

export type IndustryFrontmatterRegulatoryStandardsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type IndustryFrontmatterRegulatoryMutation = {
  certifications?: InputMaybe<Array<InputMaybe<IndustryFrontmatterRegulatoryCertificationsMutation>>>;
  standards?: InputMaybe<Array<InputMaybe<IndustryFrontmatterRegulatoryStandardsMutation>>>;
};

export type IndustryFrontmatterApplicationsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  requirements?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type IndustryFrontmatterSeoMutation = {
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  ogImage?: InputMaybe<Scalars['String']['input']>;
};

export type IndustryFrontmatterMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<IndustryFrontmatterHeroMutation>;
  overview?: InputMaybe<IndustryFrontmatterOverviewMutation>;
  capabilities?: InputMaybe<Array<InputMaybe<IndustryFrontmatterCapabilitiesMutation>>>;
  regulatory?: InputMaybe<IndustryFrontmatterRegulatoryMutation>;
  applications?: InputMaybe<Array<InputMaybe<IndustryFrontmatterApplicationsMutation>>>;
  seo?: InputMaybe<IndustryFrontmatterSeoMutation>;
};

export type IndustryMutation = {
  frontmatter?: InputMaybe<IndustryFrontmatterMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageFrontmatterMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PageMutation = {
  frontmatter?: InputMaybe<PageFrontmatterMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ServicePartsFragment = { __typename: 'Service', body?: any | null, frontmatter?: { __typename: 'ServiceFrontmatter', title: string, slug: string, description?: string | null, hero?: { __typename: 'ServiceFrontmatterHero', subtitle?: string | null, badge?: string | null, backgroundImage?: string | null } | null, overview?: { __typename: 'ServiceFrontmatterOverview', description?: string | null, highlights?: Array<string | null> | null } | null, capabilities?: Array<{ __typename: 'ServiceFrontmatterCapabilities', label?: string | null, value?: string | null, description?: string | null } | null> | null, technicalSpecs?: { __typename: 'ServiceFrontmatterTechnicalSpecs', tolerances?: { __typename: 'ServiceFrontmatterTechnicalSpecsTolerances', dimensional?: string | null, geometric?: string | null, repeatability?: string | null } | null, materials?: Array<{ __typename: 'ServiceFrontmatterTechnicalSpecsMaterials', material?: string | null, grade?: string | null } | null> | null } | null, process?: Array<{ __typename: 'ServiceFrontmatterProcess', step?: number | null, title?: string | null, description?: string | null, qualityCheck?: string | null } | null> | null, equipment?: Array<{ __typename: 'ServiceFrontmatterEquipment', name?: string | null, manufacturer?: string | null, model?: string | null, specs?: string | null } | null> | null, seo?: { __typename: 'ServiceFrontmatterSeo', metaTitle?: string | null, metaDescription?: string | null, ogImage?: string | null } | null } | null };

export type IndustryPartsFragment = { __typename: 'Industry', body?: any | null, frontmatter?: { __typename: 'IndustryFrontmatter', title: string, slug: string, description?: string | null, hero?: { __typename: 'IndustryFrontmatterHero', subtitle?: string | null, badge?: string | null, backgroundImage?: string | null } | null, overview?: { __typename: 'IndustryFrontmatterOverview', description?: string | null, marketSize?: string | null, keyDrivers?: Array<string | null> | null, challenges?: Array<string | null> | null } | null, capabilities?: Array<{ __typename: 'IndustryFrontmatterCapabilities', title?: string | null, description?: string | null, technicalDetails?: Array<string | null> | null } | null> | null, regulatory?: { __typename: 'IndustryFrontmatterRegulatory', certifications?: Array<{ __typename: 'IndustryFrontmatterRegulatoryCertifications', name?: string | null, description?: string | null, scope?: string | null } | null> | null, standards?: Array<{ __typename: 'IndustryFrontmatterRegulatoryStandards', name?: string | null, description?: string | null } | null> | null } | null, applications?: Array<{ __typename: 'IndustryFrontmatterApplications', name?: string | null, description?: string | null, requirements?: Array<string | null> | null } | null> | null, seo?: { __typename: 'IndustryFrontmatterSeo', metaTitle?: string | null, metaDescription?: string | null, ogImage?: string | null } | null } | null };

export type PagePartsFragment = { __typename: 'Page', body?: any | null, frontmatter?: { __typename: 'PageFrontmatter', title: string, slug: string, description?: string | null } | null };

export type ServiceQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ServiceQuery = { __typename?: 'Query', service: { __typename: 'Service', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, frontmatter?: { __typename: 'ServiceFrontmatter', title: string, slug: string, description?: string | null, hero?: { __typename: 'ServiceFrontmatterHero', subtitle?: string | null, badge?: string | null, backgroundImage?: string | null } | null, overview?: { __typename: 'ServiceFrontmatterOverview', description?: string | null, highlights?: Array<string | null> | null } | null, capabilities?: Array<{ __typename: 'ServiceFrontmatterCapabilities', label?: string | null, value?: string | null, description?: string | null } | null> | null, technicalSpecs?: { __typename: 'ServiceFrontmatterTechnicalSpecs', tolerances?: { __typename: 'ServiceFrontmatterTechnicalSpecsTolerances', dimensional?: string | null, geometric?: string | null, repeatability?: string | null } | null, materials?: Array<{ __typename: 'ServiceFrontmatterTechnicalSpecsMaterials', material?: string | null, grade?: string | null } | null> | null } | null, process?: Array<{ __typename: 'ServiceFrontmatterProcess', step?: number | null, title?: string | null, description?: string | null, qualityCheck?: string | null } | null> | null, equipment?: Array<{ __typename: 'ServiceFrontmatterEquipment', name?: string | null, manufacturer?: string | null, model?: string | null, specs?: string | null } | null> | null, seo?: { __typename: 'ServiceFrontmatterSeo', metaTitle?: string | null, metaDescription?: string | null, ogImage?: string | null } | null } | null } };

export type ServiceConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServiceFilter>;
}>;


export type ServiceConnectionQuery = { __typename?: 'Query', serviceConnection: { __typename?: 'ServiceConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ServiceConnectionEdges', cursor: string, node?: { __typename: 'Service', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, frontmatter?: { __typename: 'ServiceFrontmatter', title: string, slug: string, description?: string | null, hero?: { __typename: 'ServiceFrontmatterHero', subtitle?: string | null, badge?: string | null, backgroundImage?: string | null } | null, overview?: { __typename: 'ServiceFrontmatterOverview', description?: string | null, highlights?: Array<string | null> | null } | null, capabilities?: Array<{ __typename: 'ServiceFrontmatterCapabilities', label?: string | null, value?: string | null, description?: string | null } | null> | null, technicalSpecs?: { __typename: 'ServiceFrontmatterTechnicalSpecs', tolerances?: { __typename: 'ServiceFrontmatterTechnicalSpecsTolerances', dimensional?: string | null, geometric?: string | null, repeatability?: string | null } | null, materials?: Array<{ __typename: 'ServiceFrontmatterTechnicalSpecsMaterials', material?: string | null, grade?: string | null } | null> | null } | null, process?: Array<{ __typename: 'ServiceFrontmatterProcess', step?: number | null, title?: string | null, description?: string | null, qualityCheck?: string | null } | null> | null, equipment?: Array<{ __typename: 'ServiceFrontmatterEquipment', name?: string | null, manufacturer?: string | null, model?: string | null, specs?: string | null } | null> | null, seo?: { __typename: 'ServiceFrontmatterSeo', metaTitle?: string | null, metaDescription?: string | null, ogImage?: string | null } | null } | null } | null } | null> | null } };

export type IndustryQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type IndustryQuery = { __typename?: 'Query', industry: { __typename: 'Industry', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, frontmatter?: { __typename: 'IndustryFrontmatter', title: string, slug: string, description?: string | null, hero?: { __typename: 'IndustryFrontmatterHero', subtitle?: string | null, badge?: string | null, backgroundImage?: string | null } | null, overview?: { __typename: 'IndustryFrontmatterOverview', description?: string | null, marketSize?: string | null, keyDrivers?: Array<string | null> | null, challenges?: Array<string | null> | null } | null, capabilities?: Array<{ __typename: 'IndustryFrontmatterCapabilities', title?: string | null, description?: string | null, technicalDetails?: Array<string | null> | null } | null> | null, regulatory?: { __typename: 'IndustryFrontmatterRegulatory', certifications?: Array<{ __typename: 'IndustryFrontmatterRegulatoryCertifications', name?: string | null, description?: string | null, scope?: string | null } | null> | null, standards?: Array<{ __typename: 'IndustryFrontmatterRegulatoryStandards', name?: string | null, description?: string | null } | null> | null } | null, applications?: Array<{ __typename: 'IndustryFrontmatterApplications', name?: string | null, description?: string | null, requirements?: Array<string | null> | null } | null> | null, seo?: { __typename: 'IndustryFrontmatterSeo', metaTitle?: string | null, metaDescription?: string | null, ogImage?: string | null } | null } | null } };

export type IndustryConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<IndustryFilter>;
}>;


export type IndustryConnectionQuery = { __typename?: 'Query', industryConnection: { __typename?: 'IndustryConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'IndustryConnectionEdges', cursor: string, node?: { __typename: 'Industry', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, frontmatter?: { __typename: 'IndustryFrontmatter', title: string, slug: string, description?: string | null, hero?: { __typename: 'IndustryFrontmatterHero', subtitle?: string | null, badge?: string | null, backgroundImage?: string | null } | null, overview?: { __typename: 'IndustryFrontmatterOverview', description?: string | null, marketSize?: string | null, keyDrivers?: Array<string | null> | null, challenges?: Array<string | null> | null } | null, capabilities?: Array<{ __typename: 'IndustryFrontmatterCapabilities', title?: string | null, description?: string | null, technicalDetails?: Array<string | null> | null } | null> | null, regulatory?: { __typename: 'IndustryFrontmatterRegulatory', certifications?: Array<{ __typename: 'IndustryFrontmatterRegulatoryCertifications', name?: string | null, description?: string | null, scope?: string | null } | null> | null, standards?: Array<{ __typename: 'IndustryFrontmatterRegulatoryStandards', name?: string | null, description?: string | null } | null> | null } | null, applications?: Array<{ __typename: 'IndustryFrontmatterApplications', name?: string | null, description?: string | null, requirements?: Array<string | null> | null } | null> | null, seo?: { __typename: 'IndustryFrontmatterSeo', metaTitle?: string | null, metaDescription?: string | null, ogImage?: string | null } | null } | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, frontmatter?: { __typename: 'PageFrontmatter', title: string, slug: string, description?: string | null } | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, frontmatter?: { __typename: 'PageFrontmatter', title: string, slug: string, description?: string | null } | null } | null } | null> | null } };

export const ServicePartsFragmentDoc = gql`
    fragment ServiceParts on Service {
  __typename
  frontmatter {
    __typename
    title
    slug
    description
    hero {
      __typename
      subtitle
      badge
      backgroundImage
    }
    overview {
      __typename
      description
      highlights
    }
    capabilities {
      __typename
      label
      value
      description
    }
    technicalSpecs {
      __typename
      tolerances {
        __typename
        dimensional
        geometric
        repeatability
      }
      materials {
        __typename
        material
        grade
      }
    }
    process {
      __typename
      step
      title
      description
      qualityCheck
    }
    equipment {
      __typename
      name
      manufacturer
      model
      specs
    }
    seo {
      __typename
      metaTitle
      metaDescription
      ogImage
    }
  }
  body
}
    `;
export const IndustryPartsFragmentDoc = gql`
    fragment IndustryParts on Industry {
  __typename
  frontmatter {
    __typename
    title
    slug
    description
    hero {
      __typename
      subtitle
      badge
      backgroundImage
    }
    overview {
      __typename
      description
      marketSize
      keyDrivers
      challenges
    }
    capabilities {
      __typename
      title
      description
      technicalDetails
    }
    regulatory {
      __typename
      certifications {
        __typename
        name
        description
        scope
      }
      standards {
        __typename
        name
        description
      }
    }
    applications {
      __typename
      name
      description
      requirements
    }
    seo {
      __typename
      metaTitle
      metaDescription
      ogImage
    }
  }
  body
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  frontmatter {
    __typename
    title
    slug
    description
  }
  body
}
    `;
export const ServiceDocument = gql`
    query service($relativePath: String!) {
  service(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ServiceParts
  }
}
    ${ServicePartsFragmentDoc}`;
export const ServiceConnectionDocument = gql`
    query serviceConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ServiceFilter) {
  serviceConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ServiceParts
      }
    }
  }
}
    ${ServicePartsFragmentDoc}`;
export const IndustryDocument = gql`
    query industry($relativePath: String!) {
  industry(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...IndustryParts
  }
}
    ${IndustryPartsFragmentDoc}`;
export const IndustryConnectionDocument = gql`
    query industryConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: IndustryFilter) {
  industryConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...IndustryParts
      }
    }
  }
}
    ${IndustryPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      service(variables: ServiceQueryVariables, options?: C): Promise<{data: ServiceQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServiceQueryVariables, query: string}> {
        return requester<{data: ServiceQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServiceQueryVariables, query: string}, ServiceQueryVariables>(ServiceDocument, variables, options);
      },
    serviceConnection(variables?: ServiceConnectionQueryVariables, options?: C): Promise<{data: ServiceConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServiceConnectionQueryVariables, query: string}> {
        return requester<{data: ServiceConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServiceConnectionQueryVariables, query: string}, ServiceConnectionQueryVariables>(ServiceConnectionDocument, variables, options);
      },
    industry(variables: IndustryQueryVariables, options?: C): Promise<{data: IndustryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IndustryQueryVariables, query: string}> {
        return requester<{data: IndustryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IndustryQueryVariables, query: string}, IndustryQueryVariables>(IndustryDocument, variables, options);
      },
    industryConnection(variables?: IndustryConnectionQueryVariables, options?: C): Promise<{data: IndustryConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IndustryConnectionQueryVariables, query: string}> {
        return requester<{data: IndustryConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IndustryConnectionQueryVariables, query: string}, IndustryConnectionQueryVariables>(IndustryConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.6/content/1776d518-92cc-4faf-acd9-2686d5a1f7e0/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  