import { test, expect } from '@playwright/test';

test.describe('Route Coverage Tests', () => {
  const routes = [
    { path: '/', name: 'Homepage' },
    { path: '/about', name: 'About' },
    { path: '/services', name: 'Services' },
    { path: '/services/5-axis-machining', name: '5-Axis Machining' },
    { path: '/services/adaptive-machining', name: 'Adaptive Machining' },
    { path: '/services/metrology', name: 'Metrology' },
    { path: '/services/engineering', name: 'Engineering' },
    { path: '/industries', name: 'Industries' },
    { path: '/industries/aerospace', name: 'Aerospace' },
    { path: '/industries/energy', name: 'Energy' },
    { path: '/industries/defense', name: 'Defense' },
    { path: '/resources', name: 'Resources' },
    { path: '/resources/manufacturing-processes', name: 'Manufacturing Processes' },
    { path: '/resources/material-science', name: 'Material Science' },
    { path: '/resources/quality-compliance', name: 'Quality & Compliance' },
    { path: '/resources/industry-applications', name: 'Industry Applications' },
    { path: '/contact', name: 'Contact' },
    { path: '/compliance/terms', name: 'Terms & Conditions' },
    { path: '/compliance/supplier-requirements', name: 'Supplier Requirements' },
  ];

  for (const route of routes) {
    test(`${route.name} (${route.path}) loads successfully`, async ({ page }) => {
      const response = await page.goto(route.path, { waitUntil: 'domcontentloaded' });
      expect(response?.status()).toBeLessThan(400);

      // Check that page has content
      const content = await page.textContent('body');
      expect(content).toBeTruthy();
      expect(content!.length).toBeGreaterThan(100);
    });
  }

  test('All routes are accessible within 3 seconds', async ({ page }) => {
    for (const route of routes) {
      const startTime = Date.now();
      await page.goto(route.path, { waitUntil: 'domcontentloaded' });
      const loadTime = Date.now() - startTime;

      expect(loadTime).toBeLessThan(3000);
    }
  });

  test('404 page works for invalid routes', async ({ page }) => {
    const response = await page.goto('/this-page-does-not-exist');
    expect(response?.status()).toBe(404);
  });
});
